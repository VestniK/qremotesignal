# -*- coding: utf-8 -*-
from checkers import *

Import('BaseEnv')

env = BaseEnv.Clone()
env.Tool('qrs')
env.Append(CPPPATH = ['.','#tests','#qremotesignal'])
env.EnableQt4Modules(['QtCore','QtTest'])
env.Append(LIBS = 'qjson')
env.Append(LIBPATH = '.')

if  not (ARGUMENTS.get('nocheck') or GetOption('clean') or GetOption('help') ) :
   conf = Configure(env, custom_tests = qrs_custom_tests)
   if not conf.CheckQt4Module('QtTest'): Exit(1)
   conf.Finish()

env.Prepend(LIBPATH='#tests')
env.Depends( '#tests', env.Install('.',env['QRemoteSignalLib']) )
env.Prepend( LIBS='QRemoteSignal' )
if env['PLATFORM'] == 'posix': env.Append(LINKFLAGS='-Wl,-rpath=\\$$ORIGIN')
if env['PLATFORM'] == 'win32' or env['PLATFORM'] == 'cygwin': env.Prepend( LIBS=env['QrsInternalsLib'] )

env['Gch'] = env.Gch('tests_pch.h')[0]
env.NoClean(env['Gch'])
env.Append(CPPFLAGS=Split('-include tests_pch.h'))

Service = env.QRSService('example.xml')
Client  = env.QRSClient('example.xml')

tests = []
tests.append( env.Program('RemoteSignalTests',Service+Client+['remotesignaltests.cpp']) )
tests.append( env.Program('ErrorTests',Service+['errortests.cpp']) )
tests.append( env.Program('ConvertersTests',['converterstests.cpp']) )
tests.append( env.Program('DeviceManagerTests',['devicemanagertests.cpp']) )
tests.append( env.Program('ServicesManagerTests',
                          Service+Client+['servicesmanagertests.cpp']) )

tests.append( SConscript('customtypestest/SConscript',exports='env') )
tests.append( SConscript('autoconnect/SConscript',exports='env') )
# The next SConscript returns list of test programs so I'm using '+='
# instead of append
tests += SConscript('serializers/SConscript',exports='env')

env['BUILDERS']['QTest'] = Builder(action=('$SOURCE -xml -o $TARGET'),
                                   src_suffix='',
                                   suffix='.report.xml')

for test in tests:
   report = env.QTest(test)
   AlwaysBuild(report)
