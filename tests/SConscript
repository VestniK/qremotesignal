from checkers import *

Import('BaseEnv')

env = BaseEnv.Clone()
env.Tool('qrs_dev_build')
env.Append(CPPPATH = ['.','#lib'])
env.EnableQt4Modules(['QtCore','QtTest'])
env.Append(LIBS = 'qjson')

if  not (ARGUMENTS.get('nocheck') or GetOption('clean') or GetOption('help') ) :
   conf = Configure(env, custom_tests = qrs_custom_tests)
   if not conf.CheckQt4Module('QtTest'): Exit(1)
   conf.Finish()

env.Prepend(LIBPATH='#tests')
env.Install('.',env['QRemoteSignalLib'])
env.Prepend( LIBS='QRemoteSignal' )
env.Append(LINKFLAGS='-Wl,-rpath=\\$$ORIGIN')

env['Gch'] = env.Gch('sharedheaders.h')[0]
env.Append(CPPFLAGS=Split('-include sharedheaders.h'))

Service = env.QRSService('example.xml')
Client  = env.QRSClient('example.xml')

tests = []
tests.append( env.Program('RemoteSignalTests',Service+Client+['remotesignaltests.cpp']) )
tests.append( env.Program('ErrorTests',Service+['errortests.cpp']) )
tests.append( env.Program('ConvertersTests',['converterstests.cpp']) )
tests.append( env.Program('DeviceManagerTests',['devicemanagertests.cpp']) )
tests.append( SConscript('customtypestest/SConscript',exports='env') )

tests += SConscript('serializers/SConscript',exports='env')

env['BUILDERS']['QTest'] = Builder(action=('$SOURCE -xml -o $TARGET'),
                                   src_suffix='',
                                   suffix='.xml')

for test in tests:
   env.QTest(test)
