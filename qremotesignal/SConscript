# -*- coding: utf-8 -*-
import os

Import('BaseEnv')

env = BaseEnv.Clone()
env.EnableQt4Modules(['QtCore'])

env.Append(CPPPATH = ['.'])
env.Append(CPPDEFINES=['BUILD_QRS_SHARED_LIB'])

if  not (ARGUMENTS.get('nocheck') or GetOption('clean') or GetOption('help') ) :
   conf = Configure(env)
   if not conf.CheckLibWithHeader('qjson','qjson/parser.h','c++'): Exit(1)
   conf.Finish()

env['GchSh'] = env.GchSh('qremotesignal_pch.h')
env.NoClean(env['GchSh'])
env.Append(CPPFLAGS=Split('-include qremotesignal_pch.h'))

Sources = ['baseconverters.cpp','servicesmanager.cpp',
           'jsonserializer.cpp','message.cpp',
           'qdatastreamserializer.cpp','devicemanager.cpp',
           'absservice.cpp']

Headers = ['QRemoteSignal','absservice.h','baseconverters.h',
           'servicesmanager.h','baseexception.h',
           'message.h','absmessageserializer.h',
           'jsonserializer.h','serializationexceptions.h',
           'qrsexport.h','globalserializer.h',
           'qdatastreamserializer.h','templateconverters.h']

lib = env.SharedLibrary('QRemoteSignal',Sources)

# Ugly hack requiring more elegant fix
env['IncludesDirForCmake'] = str(env['prefix_inc']).replace('\\','/')
if env['PLATFORM'] == 'win32' or env['PLATFORM'] == 'cigwin':
   env['LibraryPathForCmake'] = "%s/libQRemoteSignal.a"%str(env['prefix_lib']).replace('\\','/')
else:
   env['LibraryPathForCmake'] = "%s/libQRemoteSignal.so"%str(env['prefix_lib']).replace('\\','/')

if env['PLATFORM'] == 'win32' or env['PLATFORM'] == 'cygwin':
   env['QrscPathForCmake'] = "%s/qrsc.exe"%str(env['prefix_bin']).replace('\\','/')
else:
   env['QrscPathForCmake'] = "%s/qrsc"%str(env['prefix_bin']).replace('\\','/')

Pc = env.Config('QRemoteSignal.pc.in')
CMakeConfig = env.Config('QRemoteSignalConfig.cmake.in')
qmake_feature = env.Config('qremotesignal.prf.in')
env.AlwaysBuild( qmake_feature )
env.AlwaysBuild(CMakeConfig)
env.AlwaysBuild(Pc)

env.InstallLibrary(lib)
env.InstallHeader(Headers)
env.InstallPkgConfig(Pc)
env.InstallQMakeFeature(qmake_feature)
env.InstallCMakeConfig(CMakeConfig)

BaseEnv['QRemoteSignalLib'] = lib

# I need to build static library on windows since some unit tests require access to the library
# internal functions and classes which are not exported when building windows dll.
if env['PLATFORM'] == 'win32' or env['PLATFORM'] == 'cygwin':
   InternalSources=['devicemanager.cpp']
   BaseEnv['QrsInternalsLib'] = env.StaticLibrary('QrsInternals',InternalSources)
